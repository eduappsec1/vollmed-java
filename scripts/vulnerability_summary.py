import os
import glob
import google.generativeai as genai
from pathlib import Path
from dotenv import load_dotenv

# --- Configura√ß√£o ---

# Carrega as vari√°veis de ambiente do arquivo .env na raiz do projeto
dotenv_path = Path(__file__).parent.parent / '.env'
load_dotenv(dotenv_path=dotenv_path)

# Pega a chave de API da vari√°vel de ambiente
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
if not GEMINI_API_KEY:
    print("Erro: A vari√°vel de ambiente GEMINI_API_KEY n√£o foi encontrada no arquivo .env.")
    print(f"Verifique se o arquivo '{dotenv_path}' existe e cont√©m a chave.")
    exit(1)

genai.configure(api_key=GEMINI_API_KEY)

# Diret√≥rio onde os logs est√£o localizados
LOGS_DIR = Path(__file__).parent.parent / "logs"
LOG_PATTERNS = ["snyk*.log", "semgrep*.log", "gitleaks*.log"]

# --- Fun√ß√µes ---

def read_log_files():
    """L√™ o conte√∫do dos arquivos de log de vulnerabilidade."""
    log_contents = {}
    print(f"Procurando por logs em: {LOGS_DIR}")

    for pattern in LOG_PATTERNS:
        found_files = list(LOGS_DIR.glob(pattern))
        if not found_files:
            print(f"  - Nenhum log encontrado para o padr√£o: {pattern}")
            continue

        for log_file in found_files:
            try:
                print(f"  - Lendo o arquivo de log: {log_file.name}")
                content = log_file.read_text(encoding="utf-8")
                log_contents[log_file.name] = content
            except Exception as e:
                print(f"    Erro ao ler o arquivo {log_file.name}: {e}")

    return log_contents

def get_vulnerability_summary(logs):
    """
    Envia o conte√∫do dos logs para a API Gemini e pede um resumo detalhado em Markdown.
    """
    if not logs:
        return "Nenhum conte√∫do de log foi encontrado para ser analisado."

    # Constr√≥i o prompt para o Gemini, solicitando uma sa√≠da em Markdown com emojis
    prompt_parts = [
        "Por favor, atue como um especialista em seguran√ßa de aplica√ß√µes e analise os seguintes logs de ferramentas de seguran√ßa (Snyk, Semgrep, Gitleaks).",
        "Forne√ßa um resumo detalhado das vulnerabilidades encontradas, **formatado como um relat√≥rio em Markdown (`.md`)**.",
        "Use os seguintes emojis para indicar os n√≠veis de severidade:",
        "  - üö® Cr√≠tica",
        "  - üü† Alta",
        "  - üü° M√©dia",
        "  - üîµ Baixa",
        "Estruture o relat√≥rio com t√≠tulos (`#`), subt√≠tulos (`##`), listas (`-`) e blocos de c√≥digo (```) para os trechos relevantes.",
        "Para cada vulnerabilidade, inclua:",
        "1. **Descri√ß√£o do problema.**",
        "2. **Arquivo e linha** onde a vulnerabilidade foi encontrada.",
        "3. **Sugest√£o de corre√ß√£o.**",
        "\n--- IN√çCIO DOS LOGS ---\n"
    ]

    for filename, content in logs.items():
        prompt_parts.append(f"\n--- Log: {filename} ---\n")
        prompt_parts.append(content)

    prompt_parts.append("\n--- FIM DOS LOGS ---")

    prompt = "\n".join(prompt_parts)

    # Chama a API
    print("\nGerando relat√≥rio com a IA do Gemini. Isso pode levar um momento...")
    try:
        model = genai.GenerativeModel('gemini-1.5-flash')
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        return f"## üö® Erro ao Gerar Relat√≥rio\n\nOcorreu um erro ao chamar a API do Gemini:\n```\n{e}\n```"

# --- Execu√ß√£o Principal ---

def main():
    """Fun√ß√£o principal que orquestra a execu√ß√£o do script."""
    print("ü§ñ Iniciando gerador de relat√≥rio de vulnerabilidades com IA...")
    log_data = read_log_files()

    if not log_data:
        print("\n‚ÑπÔ∏è Nenhum arquivo de log relevante foi encontrado para gerar o resumo. Pulando etapa.")
        return

    summary_md = get_vulnerability_summary(log_data)

    # Define o caminho do diret√≥rio de relat√≥rios
    reports_dir = Path(__file__).parent / "reports"

    # Cria o diret√≥rio se ele n√£o existir
    reports_dir.mkdir(exist_ok=True)

    # Define o nome do arquivo de sa√≠da (sobrescreve o antigo)
    report_path = reports_dir / "vulnerability_summary.md"

    try:
        report_path.write_text(summary_md, encoding="utf-8")
        print(f"üìã Resultados salvos em scripts/reports/vulnerability_summary.md")
    except Exception as e:
        print(f"\n‚ùå Erro ao salvar o arquivo de relat√≥rio: {e}")
        exit(1)


if __name__ == "__main__":
    main()
